//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Calibrus.ClearviewPortal.DataAccess.Infrastructure
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ClearviewEntities : DbContext
    {
        public ClearviewEntities()
            : base("name=ClearviewEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccountNumberType> AccountNumberTypes { get; set; }
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<Disposition> Dispositions { get; set; }
        public virtual DbSet<IpLocation> IpLocations { get; set; }
        public virtual DbSet<PremiseType> PremiseTypes { get; set; }
        public virtual DbSet<Program> Programs { get; set; }
        public virtual DbSet<ProgramVendor> ProgramVendors { get; set; }
        public virtual DbSet<RateClassLookup> RateClassLookups { get; set; }
        public virtual DbSet<Relationship> Relationships { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SalesChannel> SalesChannels { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<UnitOfMeasure> UnitOfMeasures { get; set; }
        public virtual DbSet<UserLog> UserLogs { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<Utility> Utilities { get; set; }
        public virtual DbSet<UtilityType> UtilityTypes { get; set; }
        public virtual DbSet<WavLog> WavLogs { get; set; }
        public virtual DbSet<DST> DSTs { get; set; }
        public virtual DbSet<ZipCodeLookup> ZipCodeLookups { get; set; }
        public virtual DbSet<Office> Offices { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Lead> Leads { get; set; }
        public virtual DbSet<Main> Mains { get; set; }
        public virtual DbSet<DtDAgentTrack> DtDAgentTracks { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
    
        public virtual ObjectResult<GetVerifiedChartDetail_Result> GetVerifiedChartDetail(Nullable<System.DateTime> startDate, Nullable<int> vendorId, Nullable<int> officeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("OfficeId", officeId) :
                new ObjectParameter("OfficeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVerifiedChartDetail_Result>("GetVerifiedChartDetail", startDateParameter, vendorIdParameter, officeIdParameter);
        }
    
        public virtual ObjectResult<GetVerifiedChartSummary_Result> GetVerifiedChartSummary(Nullable<System.DateTime> startDate, Nullable<int> vendorId, Nullable<int> officeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("OfficeId", officeId) :
                new ObjectParameter("OfficeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetVerifiedChartSummary_Result>("GetVerifiedChartSummary", startDateParameter, vendorIdParameter, officeIdParameter);
        }
    
        public virtual ObjectResult<GetTopOfficeStats_Result> GetTopOfficeStats(Nullable<System.DateTime> startDate, Nullable<int> vendorId, Nullable<int> officeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("OfficeId", officeId) :
                new ObjectParameter("OfficeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTopOfficeStats_Result>("GetTopOfficeStats", startDateParameter, vendorIdParameter, officeIdParameter);
        }
    
        public virtual ObjectResult<GetTopUserStats_Result> GetTopUserStats(Nullable<System.DateTime> startDate, Nullable<int> vendorId, Nullable<int> officeId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var officeIdParameter = officeId.HasValue ?
                new ObjectParameter("OfficeId", officeId) :
                new ObjectParameter("OfficeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTopUserStats_Result>("GetTopUserStats", startDateParameter, vendorIdParameter, officeIdParameter);
        }
    
        public virtual ObjectResult<GetTopVendorStats_Result> GetTopVendorStats(Nullable<System.DateTime> startDate, Nullable<int> vendorId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTopVendorStats_Result>("GetTopVendorStats", startDateParameter, vendorIdParameter);
        }
    
        public virtual ObjectResult<GetUtilityPrograms_Result> GetUtilityPrograms(Nullable<int> userVendorId, Nullable<int> userOfficeId, string state, string zip)
        {
            var userVendorIdParameter = userVendorId.HasValue ?
                new ObjectParameter("userVendorId", userVendorId) :
                new ObjectParameter("userVendorId", typeof(int));
    
            var userOfficeIdParameter = userOfficeId.HasValue ?
                new ObjectParameter("userOfficeId", userOfficeId) :
                new ObjectParameter("userOfficeId", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUtilityPrograms_Result>("GetUtilityPrograms", userVendorIdParameter, userOfficeIdParameter, stateParameter, zipParameter);
        }
    
        public virtual ObjectResult<spGetAWSWavUrl_Result> spGetAWSWavUrl(Nullable<int> id, Nullable<System.DateTime> date, string vendorNum)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var vendorNumParameter = vendorNum != null ?
                new ObjectParameter("VendorNum", vendorNum) :
                new ObjectParameter("VendorNum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAWSWavUrl_Result>("spGetAWSWavUrl", idParameter, dateParameter, vendorNumParameter);
        }
    }
}
