// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CalibrusTPV.ReversePocoGen
{


    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class ScriptsContext : System.Data.Entity.DbContext, IScriptsContext
    {
        public System.Data.Entity.DbSet<Condition> Conditions { get; set; } // Conditions
        public System.Data.Entity.DbSet<Directive> Directives { get; set; } // Directives
        public System.Data.Entity.DbSet<LookUp> LookUps { get; set; } // LookUps
        public System.Data.Entity.DbSet<OrderDetail> OrderDetails { get; set; } // OrderDetail
        public System.Data.Entity.DbSet<Question> Questions { get; set; } // Question
        public System.Data.Entity.DbSet<QustionDirectiveAssoc> QustionDirectiveAssocs { get; set; } // QustionDirectiveAssoc
        public System.Data.Entity.DbSet<Recording> Recordings { get; set; } // Recordings
        public System.Data.Entity.DbSet<ScriptQuestion> ScriptQuestions { get; set; } // ScriptQuestions
        public System.Data.Entity.DbSet<State> States { get; set; } // States
        public System.Data.Entity.DbSet<Tpv> Tpvs { get; set; } // TPV
        public System.Data.Entity.DbSet<VGender> VGenders { get; set; } // vGender
        public System.Data.Entity.DbSet<VLookup> VLookups { get; set; } // vLookups
        public System.Data.Entity.DbSet<VQtype> VQtypes { get; set; } // vQtype
        public System.Data.Entity.DbSet<VSalesChannel> VSalesChannels { get; set; } // vSalesChannel

        static ScriptsContext()
        {
            System.Data.Entity.Database.SetInitializer<ScriptsContext>(null);
        }

        public ScriptsContext()
            : base("Name=ScriptsContext")
        {
        }

        public ScriptsContext(string connectionString)
            : base(connectionString)
        {
        }

        public ScriptsContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public ScriptsContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public ScriptsContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new ConditionConfiguration());
            modelBuilder.Configurations.Add(new DirectiveConfiguration());
            modelBuilder.Configurations.Add(new LookUpConfiguration());
            modelBuilder.Configurations.Add(new OrderDetailConfiguration());
            modelBuilder.Configurations.Add(new QuestionConfiguration());
            modelBuilder.Configurations.Add(new QustionDirectiveAssocConfiguration());
            modelBuilder.Configurations.Add(new RecordingConfiguration());
            modelBuilder.Configurations.Add(new ScriptQuestionConfiguration());
            modelBuilder.Configurations.Add(new StateConfiguration());
            modelBuilder.Configurations.Add(new TpvConfiguration());
            modelBuilder.Configurations.Add(new VGenderConfiguration());
            modelBuilder.Configurations.Add(new VLookupConfiguration());
            modelBuilder.Configurations.Add(new VQtypeConfiguration());
            modelBuilder.Configurations.Add(new VSalesChannelConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ConditionConfiguration(schema));
            modelBuilder.Configurations.Add(new DirectiveConfiguration(schema));
            modelBuilder.Configurations.Add(new LookUpConfiguration(schema));
            modelBuilder.Configurations.Add(new OrderDetailConfiguration(schema));
            modelBuilder.Configurations.Add(new QuestionConfiguration(schema));
            modelBuilder.Configurations.Add(new QustionDirectiveAssocConfiguration(schema));
            modelBuilder.Configurations.Add(new RecordingConfiguration(schema));
            modelBuilder.Configurations.Add(new ScriptQuestionConfiguration(schema));
            modelBuilder.Configurations.Add(new StateConfiguration(schema));
            modelBuilder.Configurations.Add(new TpvConfiguration(schema));
            modelBuilder.Configurations.Add(new VGenderConfiguration(schema));
            modelBuilder.Configurations.Add(new VLookupConfiguration(schema));
            modelBuilder.Configurations.Add(new VQtypeConfiguration(schema));
            modelBuilder.Configurations.Add(new VSalesChannelConfiguration(schema));
            return modelBuilder;
        }
    }
}
// </auto-generated>
