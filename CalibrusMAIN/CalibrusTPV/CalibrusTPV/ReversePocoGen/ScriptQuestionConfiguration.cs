// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CalibrusTPV.ReversePocoGen
{

    // ScriptQuestions
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.28.0.0")]
    public class ScriptQuestionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ScriptQuestion>
    {
        public ScriptQuestionConfiguration()
            : this("dbo")
        {
        }

        public ScriptQuestionConfiguration(string schema)
        {
            ToTable("ScriptQuestions", schema);
            HasKey(x => x.ScriptId);

            Property(x => x.ScriptId).HasColumnName(@"ScriptId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.QtypeId).HasColumnName(@"QtypeId").HasColumnType("int").IsRequired();
            Property(x => x.StateCode).HasColumnName(@"StateCode").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(2);
            Property(x => x.SalesChannelId).HasColumnName(@"SalesChannelId").HasColumnType("int").IsRequired();
            Property(x => x.Active).HasColumnName(@"Active").HasColumnType("bit").IsRequired();
            Property(x => x.QuestionId).HasColumnName(@"QuestionId").HasColumnType("int").IsRequired();
            Property(x => x.ScriptOrder).HasColumnName(@"ScriptOrder").HasColumnType("int").IsRequired();

            // Foreign keys
            HasRequired(a => a.Question).WithMany(b => b.ScriptQuestions).HasForeignKey(c => c.QuestionId).WillCascadeOnDelete(false); // FK_ScriptQuestions_Question
            HasRequired(a => a.State).WithMany(b => b.ScriptQuestions).HasForeignKey(c => c.StateCode).WillCascadeOnDelete(false); // FK_ScriptQuestions_State
        }
    }

}
// </auto-generated>
